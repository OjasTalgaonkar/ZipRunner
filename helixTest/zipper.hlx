#[trivially_import(true)]

ffi "c++" import "zipper.hh";

fn serializeTreeToBuffer(root: unsafe *HuffNode, buffer: unsafe *string, bitcount: unsafe *i32) {
    if ( root != &null ){
        
        
        
    }
}

void generateEncodingMap(HuffNode *root, const ::std::string &prefix,::std::unordered_map<char, ::std::string> &encodingMap);
 
fn create_node(l: char, f: i32, lc: unsafe *HuffNode = nullptr, rc: unsafe *HuffNode = nullptr) -> unsafe *HuffNode {
    let node = malloc(sizeof(HuffNode)) as unsafe *HuffNode;
    node->letter = l;
    node->freq = f;
    node->left = lc;
    node->right = rc;

    return node;
}

fn main() -> i32 {
    let node: unsafe *HuffNode = create_node('\0', 0);
    finally: free(node);

    let str: string = "test";
    let in_t: i32 = 0;

    serializeTreeToBuffer(node, &str, &in_t);
    return 0;
}